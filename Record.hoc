		/////// Recording variables//////////////
// recording membrane voltage
objref Volts, vvec, tvvec, CellsToRec
Volts = new List()
CellsToRec = new Vector()
CellsToRec.indgen(0,61,1)

	tvvec = new Vector()
	tvvec.record(&t)
	//Volts.append(tvvec)
	
for y = 0, CellsToRec.size() -1 {
	vvec = new Vector()
	
	vvec.record(&Cells.o(1).o( CellsToRec.x(y) ).soma.v(0.5))

	Volts.append(vvec)
}


// Recording weights
objref Weights, WeightTimes, wvec, twvec
Weights = new List()
WeightTimes = new List()
twvec = new Vector()

twvec.record(&t, 40)

for s = 0, Syn.count() -1 {
	wvec = new Vector()

	if (Connections.x(s, 5) == 1 || Connections.x(s, 5) == 3) {
		wvec.record(&Syn.o(s).W_ampa, 40)//, twvec,1)
		} else {
			if (Connections.x(s,5) == 0 || Connections.x(s, 5) == 2) {
				wvec.record(&Syn.o(s).W_gabaa, 40)///, wvec, twvec,1)
			} else {
			printf("\n ----------- Problem finding connection to record\n")
			}
		}		
Weights.append(wvec)
} // for s

// Recording Currents
objref Currents, rectvec, cvec, twvec1
twvec1 = new Vector()
Currents = new List()
rectvec = new Vector()

// for (i = StimSpace * 5; i <= StimSpace * 6; i+=5) {
	// rectvec.append(i)
// }
		rectvec.indgen(0, tstop, tstop/130 )
		twvec1 = rectvec 
for s = 0, Syn.count() -1 {
	cvec = new Vector()

	if (Connections.x(s, 5) == 1 || Connections.x(s, 5) == 3) {
	// cvec.record(&Syn.o(s).D1, twvec1,1)
		cvec.record(&Syn.o(s).i_ampa, twvec1,1)
		// cvec.record(&Syn.o(s).Capoolcon, 40)//, twvec,1)
		} else {
			if (Connections.x(s,5) == 0 || Connections.x(s, 5) == 2) {
				cvec.record(&Syn.o(s).i_gabaa, twvec1,1)
				// cvec.record(&Syn.o(s).Capoolcon, 40)///, wvec, twvec,1)
			} else {
			printf("\n ----------- Problem finding connection to record\n")
			}
		}		
Currents.append(cvec)
} // for s

// Recording Spike times
objref SpikeIDs, SpikeTimes, Sidvec, Stvec, nc_, nil
SpikeIDs = new List()
SpikeTimes = new List()

for c = 0, Cells.count() - 1 {
	Sidvec = new Vector()
	Stvec = new Vector()
	for ii = 0, Cells.o(c).count() - 1 {
		Cells.o(c).o(ii).soma nc_ = new NetCon(&v(0.5), nil)
		nc_.threshold = -20
		nc_.record(Stvec, Sidvec, ii)
	}
	SpikeIDs.append(Sidvec)
	SpikeTimes.append(Stvec)
}



//---------------------------------------------------------------
/*
		/////// Recording All xtraSyn cond and curr vs time//////////////
// recording cond and curr vs time
objref GCond,  GXCond, ggvec, ggxvec, tvvec, CellsToRec
GCond = new List()
GXCond = new List()
CellsToRec = new Vector()
CellsToRec.indgen(0,61,1)

	tvvec = new Vector()
	tvvec.record(&t)
	//Volts.append(tvvec)
	
for y = 0, CellsToRec.size() -1 {
	ggvec = new Vector()
  ggxvec = new Vector()	
	vvec.record(&Cells.o(1).o( CellsToRec.x(y) ).soma.v(0.5))

	Volts.append(vvec)
}
*/
//---------------------------------------------------------------------
//This code was added on 10thSpet2018
//This code gives the IDs or cell numbers which on which inhib synapses are set
//use this to record conductance etc.
//---------------------------------------------------------------------
objref synPreIDvec, synPosIDvec, synIDvec
synPreIDvec = new Vector()
synPosIDvec = new Vector()
synIDvec = new Vector()
j=-1
{printf("--------------------------------\n")}
{printf("j..start = %d\n", j+1)}
for s = 0, Syn.count() -1 {
		if ((Connections.x(s,5) == Inhibitory) && (Connections.x(s, 1) == CA3b) && (Connections.x(s, 3) == CA3e)&& ((Connections.x(s, 4) == 0) || (Connections.x(s, 4) == 1))) {
						j=j+1
            //{printf("b = %d\t m = %d\t%d\n", Connections.x(s, 2), Connections.x(s, 4), Connections.x(s, 0))}
            synPreIDvec.append(Connections.x(s, 2))
            synPosIDvec.append(Connections.x(s, 4))
            synIDvec.append(Connections.x(s, 0))  
            {printf("b* = %d\t m* = %d\t%d\n", synPreIDvec.x[j], synPosIDvec.x[j], synIDvec.x[j])}
			} else {
				  j=j
			}
		}		
{printf("j..stop = %d\n", j)}
{printf("--------------------------------\n")}
{printf("synPreIDvec.size() = %d\n", synPreIDvec.size())}
{printf("synPosIDvec.size() = %d\n", synPosIDvec.size())}
{printf("synIDvec.size() = %d\n", synIDvec.size())}
{printf("------------CA3b = %d -----------------\n", CA3b)}
{printf("------------CA3e = %d -----------------\n", CA3e)}


///////////////// Record Conductance as well as Current vs time ////////////////////////////////
//Synaptic as well as xtra synaptic
///////////////// Added this on 9thSept2018 from NB //////////////////////////////////////////
// Record conductance vs time
//Record current vs time

objref ginhvec, gxinhvec, cinhvec, cxinhvec, twvec1, Ginh, Cinh, GXinh, CXinh	
objref synIDvec
Ginh = new List()
Cinh = new List()
GXinh = new List()
CXinh = new List()

tgvec = new Vector()
tgvec.record(&t)

ginhvec = new Vector()
cinhvec = new Vector()
gxinhvec = new Vector()
cxinhvec = new Vector()

j=0
printf("--------------------------------\n"
printf("j..start = %d\n", j)
for s = 0, (synIDvec.count()-1) {
        ginhvec = new Vector()
        cinhvec = new Vector()
        gxinhvec = new Vector()
        cxinhvec = new Vector()
				
        tmp = synIDvec.x[s]
				cinhvec.record(&Syn.o(tmp).i_gabaa)
				ginhvec.record(&Syn.o(tmp).g_gabaa)
				cxinhvec.record(&Syn.o(tmp).i_xtra)
				gxinhvec.record(&Syn.o(tmp).g_xtra)

        Ginh.append(ginhvec)
        Cinh.append(cinhvec)
        GXinh.append(gxinhvec)
        CXinh.append(cxinhvec)
} 
				
printf("j..stop = %d\n", j)
printf("--------------------------------\n"


